// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Store.Repository.Context;

#nullable disable

namespace Store.Repository.Migrations
{
    [DbContext(typeof(StoreDataContext))]
    [Migration("20220829234226_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ORDER_APP", b =>
                {
                    b.Property<Guid>("App_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("App_Id", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("ORDER_APP");
                });

            modelBuilder.Entity("Store.Domain.Entities.App", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR(80)")
                        .HasColumnName("APP_NAME");

                    b.HasKey("Id");

                    b.ToTable("APP", (string)null);
                });

            modelBuilder.Entity("Store.Domain.Entities.CreditCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreditCardNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("CREDIT_CARD_NUMBER");

                    b.Property<string>("ExpirationDate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("EXPIRATION_DATE");

                    b.Property<string>("NameInCreditCard")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VARCHAR(30)")
                        .HasColumnName("NAME_IN_CREDIT_CARD");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CREDIT_CARD", (string)null);
                });

            modelBuilder.Entity("Store.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("creditCardId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("creditCardId");

                    b.ToTable("ORDER", (string)null);
                });

            modelBuilder.Entity("Store.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("DATE")
                        .HasColumnName("BIRTHDATE");

                    b.Property<string>("Complement")
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR(80)")
                        .HasColumnName("COMPLEMENT");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR(80)")
                        .HasColumnName("CPF");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR(80)")
                        .HasColumnName("EMAIL");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("GENDER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR(80)")
                        .HasColumnName("USER_NAME");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR(80)")
                        .HasColumnName("HASH");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR(80)")
                        .HasColumnName("STREET");

                    b.Property<decimal>("StreetNumber")
                        .HasColumnType("NUMERIC")
                        .HasColumnName("STREET_NUMBER");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR(80)")
                        .HasColumnName("ZIP_CODE");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Cpf" }, "IX_USER_CPF")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "IX_USER_EMAIL")
                        .IsUnique();

                    b.ToTable("USER", (string)null);
                });

            modelBuilder.Entity("ORDER_APP", b =>
                {
                    b.HasOne("Store.Domain.Entities.App", null)
                        .WithMany()
                        .HasForeignKey("App_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_OrderApp_AppId");

                    b.HasOne("Store.Domain.Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_OrderApp_OrderId");
                });

            modelBuilder.Entity("Store.Domain.Entities.CreditCard", b =>
                {
                    b.HasOne("Store.Domain.Entities.User", "User")
                        .WithMany("CreditCard")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_USER_CARD");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Store.Domain.Entities.Order", b =>
                {
                    b.HasOne("Store.Domain.Entities.User", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store.Domain.Entities.CreditCard", "creditCard")
                        .WithMany("Orders")
                        .HasForeignKey("creditCardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_CREDITCARD_ORDER");

                    b.Navigation("Buyer");

                    b.Navigation("creditCard");
                });

            modelBuilder.Entity("Store.Domain.Entities.CreditCard", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Store.Domain.Entities.User", b =>
                {
                    b.Navigation("CreditCard");
                });
#pragma warning restore 612, 618
        }
    }
}
